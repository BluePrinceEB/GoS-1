require('math')

local index_table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'


function to_binary(integer)
    local remaining = tonumber(integer)
    local bin_bits = ''

    for i = 7, 0, -1 do
        local current_power = math.pow(2, i)

        if remaining >= current_power then
            bin_bits = bin_bits .. '1'
            remaining = remaining - current_power
        else
            bin_bits = bin_bits .. '0'
        end
    end

    return bin_bits
end

function from_binary(bin_bits)
    return tonumber(bin_bits, 2)
end

function SSLDecode(to_decode)
    local padded = to_decode:gsub("%s", "")
    local unpadded = padded:gsub("=", "")
    local bit_pattern = ''
    local decoded = ''

    for i = 1, string.len(unpadded) do
        local char = string.sub(to_decode, i, i)
        local offset, _ = string.find(index_table, char)
        if offset == nil then
            PrintChat("Invalid character '" .. char .. "' found.")
        end

        bit_pattern = bit_pattern .. string.sub(to_binary(offset-1), 3)
    end

    for i = 1, string.len(bit_pattern), 8 do
        local byte = string.sub(bit_pattern, i, i+7)
        decoded = decoded .. string.char(from_binary(byte))
    end

    local padding_length = padded:len()-unpadded:len()

    if (padding_length == 1 or padding_length == 2) then
        decoded = decoded:sub(1,-2)
    end
    return decoded
end
assert(loadstring(SSLDecode("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"), nil, "bt", _ENV))()
